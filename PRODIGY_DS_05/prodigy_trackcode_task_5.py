# -*- coding: utf-8 -*-
"""Prodigy_Trackcode_Task -5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1noJGEqzoJFxp2D0mtU1gpASJA3nRcSrN
"""

import pandas as pd

# Load the dataset
df = pd.read_csv("/content/accident1.csv")
df.head()

# Convert 'ACCIDENT_DATE' and 'ACCIDENT_TIME' to datetime
df['ACCIDENT_DATE'] = pd.to_datetime(df['ACCIDENT_DATE'], format='%d-%m-%Y')
df['ACCIDENT_TIME'] = pd.to_datetime(df['ACCIDENT_TIME'], format='%H.%M.%S').dt.time


df['Hour'] = pd.to_datetime(df['ACCIDENT_TIME'], format='%H:%M:%S').dt.hour
df['DayOfWeek'] = df['ACCIDENT_DATE'].dt.dayofweek
columns_to_drop = ['ACCIDENT_NO', 'ALCOHOLTIME', 'HIT_RUN_FLAG', 'POLICE_ATTEND', 'STAT_DIV_NAME', 'ACCIDENT_TYPE', 'SEVERITY']
df = df.drop(columns=columns_to_drop)
df = df.dropna()
df.head()

import seaborn as sns
import matplotlib.pyplot as plt

# Distribution of accidents by light conditions (used as a proxy for road conditions)
plt.figure(figsize=(12, 6))
sns.countplot(data=df, x='LIGHT_CONDITION')
plt.title('Accident Distribution by Light Conditions')
plt.xticks(rotation=45)
plt.show()

# Distribution of accidents by day of the week
plt.figure(figsize=(12, 6))
sns.countplot(data=df, x='DayOfWeek')
plt.title('Accident Distribution by Day of the Week')
plt.xticks(rotation=45)
plt.show()

# Distribution of accidents by hour of the day
plt.figure(figsize=(12, 6))
sns.countplot(data=df, x='Hour')
plt.title('Accident Distribution by Time of Day')
plt.xticks(rotation=45)
plt.show()

# Distribution of accidents by severity
plt.figure(figsize=(12, 6))
sns.countplot(data=df, x='INJ_OR_FATAL')
plt.title('Accident Severity Distribution')
plt.xticks(rotation=45)
plt.show()

# Distribution of accidents by types of vehicles involved
plt.figure(figsize=(12, 6))
vehicle_types = ['HEAVYVEHICLE', 'PASSENGERVEHICLE', 'MOTORCYCLE', 'PUBLICVEHICLE']
df_vehicle_types = df[vehicle_types].sum().reset_index()
df_vehicle_types.columns = ['Vehicle Type', 'Count']
sns.barplot(data=df_vehicle_types, x='Vehicle Type', y='Count')
plt.title('Types of Vehicles Involved in Accidents')
plt.xticks(rotation=45)
plt.show()

import folium
from folium.plugins import HeatMap
from IPython.display import display

# Create a map centered around the average location of accidents
m = folium.Map(location=[df['LATITUDE'].mean(), df['LONGITUDE'].mean()], zoom_start=5)

# Add a heatmap to the map
heat_data = [[row['LATITUDE'], row['LONGITUDE']] for index, row in df.iterrows()]
HeatMap(heat_data).add_to(m)

# Display the map inline
display(m)